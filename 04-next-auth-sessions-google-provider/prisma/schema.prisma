// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id                String                 @id @default(cuid())
  owner             String
  name              String
  type              String
  description       String
  beds              Int
  baths             Int
  squareFeet        Float
  amenities         String
  isFeatured        Boolean
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  location          PropertyLocation?
  rate              PropertyRate?
  sellerInfo        PropertySellerInfo?
  images            PropertyImage[]
  propertyBookmarks UserPropertyBookmark[]

  @@map("properties")
}

model PropertyLocation {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  zipcode    String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @unique
  createdAt  DateTime @default(now())

  @@map("propertyLocations")
}

model PropertyRate {
  id         String   @id @default(cuid())
  weekly     Float?
  monthly    Float?
  nightly    Float?
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @unique
  createdAt  DateTime @default(now())

  @@map("propertyRates")
}

model PropertySellerInfo {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @unique
  createdAt  DateTime @default(now())

  @@map("propertySellerInfos")
}

model PropertyImage {
  id         String   @id @default(cuid())
  name       String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())

  @@map("propertyImages")
}

model UserPropertyBookmark {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())

  @@map("userPropertyBookmarks")
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  email             String                 @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  propertyBookmarks UserPropertyBookmark[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationTokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}
